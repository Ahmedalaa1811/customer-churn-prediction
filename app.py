import streamlit as st
import pandas as pd
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
import io
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader

# ---------------- Load Model ----------------
model = joblib.load("models/churn_model.pkl")
with open("models/churn_threshold.txt", "r") as f:
    threshold = float(f.read().strip())

st.set_page_config(page_title="Customer Churn Prediction", layout="wide")
st.title("üìä Customer Churn Prediction App")

# ---------------- Narrative Generator ----------------
def generate_narrative(results):
    churn_rate = results["Churn_Prediction"].mean() * 100
    churn_geo = results.groupby("Geography")["Churn_Prediction"].mean()
    churn_gender = results.groupby("Gender")["Churn_Prediction"].mean()
    churn_products = results.groupby("NumOfProducts")["Churn_Prediction"].mean()
    churn_tenure = results.groupby("Tenure")["Churn_Prediction"].mean()

    narrative = f"Overall churn rate is {churn_rate:.1f}%, "

    risky_geo = churn_geo.idxmax()
    narrative += f"Customers in {risky_geo} show the highest churn risk,\n "

    risky_gender = churn_gender.idxmax()
    narrative += f"{risky_gender} customers are more likely to churn, "

    risky_products = churn_products.idxmax()
    narrative += f"Customers with {risky_products} products churn the most,\n "

    risky_tenure = churn_tenure.idxmax()
    narrative += f"Churn is highest among customers with {risky_tenure} years of tenure. "

    return narrative

# ---------------- PDF Export Function ----------------
def generate_pdf(churn_rate, churn_count, stay_count, fig_geo, fig_age, fig_gender, fig_products, fig_tenure, top_customers, narrative):
    buffer = io.BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)

    # Title
    c.setFont("Helvetica-Bold", 16)
    c.drawString(150, 750, "Customer Churn Prediction Report")

    # Narrative Summary
    c.setFont("Helvetica", 11)
    text_obj = c.beginText(50, 720)
    text_obj.textLines(f"Executive Summary:\n{narrative}")
    c.drawText(text_obj)

    # Metrics
    c.setFont("Helvetica", 12)
    c.drawString(50, 630, f"Churn Rate: {churn_rate:.1f}%")
    c.drawString(50, 610, f"Churners: {churn_count}")
    c.drawString(50, 590, f"Non-Churners: {stay_count}")

    # Page 1: Geography + Age
    img1 = io.BytesIO(); fig_geo.savefig(img1, format="png", bbox_inches="tight"); img1.seek(0)
    c.drawImage(ImageReader(img1), 50, 380, width=250, height=200)

    img2 = io.BytesIO(); fig_age.savefig(img2, format="png", bbox_inches="tight"); img2.seek(0)
    c.drawImage(ImageReader(img2), 320, 380, width=250, height=200)

    c.showPage()

    # Page 2: Gender + Products
    img3 = io.BytesIO(); fig_gender.savefig(img3, format="png", bbox_inches="tight"); img3.seek(0)
    c.drawImage(ImageReader(img3), 50, 430, width=250, height=200)

    img4 = io.BytesIO(); fig_products.savefig(img4, format="png", bbox_inches="tight"); img4.seek(0)
    c.drawImage(ImageReader(img4), 320, 430, width=250, height=200)

    c.showPage()

    # Page 3: Tenure + Top Customers
    img5 = io.BytesIO(); fig_tenure.savefig(img5, format="png", bbox_inches="tight"); img5.seek(0)
    c.drawImage(ImageReader(img5), 50, 430, width=300, height=200)

    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, 400, "Top 10 High-Risk Customers:")

    c.setFont("Helvetica", 10)
    y = 380
    for idx, row in top_customers.iterrows():
        c.drawString(50, y, f"Customer {idx} - Prob: {row['Churn_Probability']:.2f}")
        y -= 15
        if y < 50:
            c.showPage()
            y = 750

    c.setFont("Helvetica-Oblique", 8)
    c.drawString(50, 30, "Generated by Customer Churn Prediction App")

    c.save()
    buffer.seek(0)
    return buffer

# ---------------- Tabs ----------------
tab1, tab2, tab3 = st.tabs(["üîÆ Single Prediction", "üìÇ Batch Prediction & Insights", "‚ÑπÔ∏è About"])

# ---------------- Tab 1: Single Prediction ----------------
with tab1:
    st.header("üë§ Single Customer Prediction")

    with st.form("single_customer_form"):
        credit_score = st.number_input("Credit Score", min_value=0, max_value=1000, value=650)
        geography = st.selectbox("Geography", ["France", "Spain", "Germany"])
        gender = st.selectbox("Gender", ["Male", "Female"])
        age = st.number_input("Age", min_value=18, max_value=100, value=35)
        tenure = st.number_input("Tenure (Years at bank)", min_value=0, max_value=50, value=5)
        balance = st.number_input("Balance", min_value=0.0, value=5000000.0)
        products = st.number_input("Number of Products", min_value=1, max_value=20, value=1)
        has_card = st.selectbox("Has Credit Card?", [0, 1])
        active = st.selectbox("Is Active Member?", [0, 1])
        salary = st.number_input("Estimated Salary", min_value=0.0, value=200000.0)

        submitted = st.form_submit_button("Predict")

        if submitted:
            single_df = pd.DataFrame([{
                "CreditScore": credit_score,
                "Geography": geography,
                "Gender": gender,
                "Age": age,
                "Tenure": tenure,
                "Balance": balance,
                "NumOfProducts": products,
                "HasCrCard": has_card,
                "IsActiveMember": active,
                "EstimatedSalary": salary
            }])

            prob = model.predict_proba(single_df)[:, 1][0]
            pred = int(prob >= threshold)

            st.write(f"### Prediction: {'‚ùå Will Churn' if pred==1 else '‚úÖ Will Stay'}")
            st.write(f"**Churn Probability:** {prob:.2f}")

# ---------------- Tab 2: Batch Prediction & Insights ----------------
with tab2:
    st.header("üìÇ Upload File for Predictions & Insights")

    uploaded_file = st.file_uploader("Upload customer data (CSV)", type=["csv"])

    if uploaded_file is not None:
        data = pd.read_csv(uploaded_file)
        st.write("### Preview of Uploaded Data")
        st.dataframe(data.head())

        # Predictions
        probs = model.predict_proba(data)[:, 1]
        preds = (probs >= threshold).astype(int)

        results = data.copy()
        results["Churn_Probability"] = probs
        results["Churn_Prediction"] = preds

        st.write("### Predictions")
        st.dataframe(results)

        # Download CSV
        csv = results.to_csv(index=False).encode("utf-8")
        st.download_button(
            label="üì• Download Predictions as CSV",
            data=csv,
            file_name="churn_predictions.csv",
            mime="text/csv"
        )

        # Insights
        st.markdown("---")
        st.header("üìä Dataset Insights")

        churn_rate = (results["Churn_Prediction"].mean()) * 100
        churn_count = results["Churn_Prediction"].sum()
        stay_count = len(results) - churn_count

        col1, col2, col3 = st.columns(3)
        col1.metric("Churn Rate", f"{churn_rate:.1f}%")
        col2.metric("Churners", churn_count)
        col3.metric("Non-Churners", stay_count)

        # Row 1: Geography & Age
        col4, col5 = st.columns(2)
        with col4:
            st.subheader("Churn by Geography")
            fig_geo, ax = plt.subplots(figsize=(3,2))
            sns.countplot(data=results, x="Geography", hue="Churn_Prediction", ax=ax)
            st.pyplot(fig_geo)
        with col5:
            st.subheader("Age Distribution")
            fig_age, ax2 = plt.subplots(figsize=(3,2))
            sns.kdeplot(data=results, x="Age", hue="Churn_Prediction", fill=True, ax=ax2)
            st.pyplot(fig_age)

        # Row 2: Gender & Products
        col6, col7 = st.columns(2)
        with col6:
            st.subheader("Churn by Gender")
            fig_gender, ax3 = plt.subplots(figsize=(3,2))
            sns.countplot(data=results, x="Gender", hue="Churn_Prediction", ax=ax3)
            st.pyplot(fig_gender)
        with col7:
            st.subheader("Churn by Products")
            fig_products, ax4 = plt.subplots(figsize=(3,2))
            sns.countplot(data=results, x="NumOfProducts", hue="Churn_Prediction", ax=ax4)
            st.pyplot(fig_products)

        # Row 3: Tenure (make smaller)
        col8, col9 = st.columns([1,1])  # split into two equal halves
        with col8:
            st.subheader("Churn by Tenure")
            fig_tenure, ax5 = plt.subplots(figsize=(3,2))  # smaller figure size
            sns.histplot(data=results, x="Tenure", hue="Churn_Prediction", multiple="stack", ax=ax5)
            st.pyplot(fig_tenure)


        # Narrative
        st.subheader("üìñ Automated Insights Report")
        narrative = generate_narrative(results)
        st.write(narrative)

        # Top risky customers
        top_customers = results.sort_values(by="Churn_Probability", ascending=False).head(10)

        # PDF Report
        pdf_buffer = generate_pdf(churn_rate, churn_count, stay_count, fig_geo, fig_age, fig_gender, fig_products, fig_tenure, top_customers, narrative)
        st.download_button(
            label="üì• Download PDF Report",
            data=pdf_buffer,
            file_name="churn_report.pdf",
            mime="application/pdf"
        )

# ---------------- Tab 3: About ----------------
with tab3:
    st.header("‚ÑπÔ∏è About This App")
    st.write("""
    This app predicts **customer churn** using a machine learning model trained on
    historical banking customer data.

    ### Features:
    - üîÆ Single-customer prediction form
    - üìÇ Batch predictions from CSV
    - üìä Dataset insights with metrics, charts, and narrative
    - üì• Downloadable CSV + PDF report (with executive summary and top risky customers)

    ### Author
    Ahmed Alaa Els  
    [LinkedIn](https://www.linkedin.com/in/ahmed-alaa-elsheikh-98a4b5182/) | 
    [Email](mailto:ahmed.alaa181197@gmail.com)
    """)
